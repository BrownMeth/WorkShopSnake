name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]
    runs-on: windows-latest

    env:
      Solution_Path: ""
      Wap_Project_Path: ""
      Wap_Project_Directory: ""

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Discover solution / project and WAP project
      id: discover
      shell: pwsh
      run: |
        Write-Host "Searching repository for .sln, .csproj and .wapproj..."
        $repoRoot = Get-Location
        $sln = Get-ChildItem -Path $repoRoot -Recurse -Filter *.sln -File -ErrorAction SilentlyContinue | Select-Object -First 1
        if ($sln) {
          Write-Host "Found solution: $($sln.FullName)"
          Add-Content -Path $env:GITHUB_ENV -Value "Solution_Path=$($sln.FullName)"
          echo "found_solution=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        } else {
          $csproj = Get-ChildItem -Path $repoRoot -Recurse -Filter *.csproj -File -ErrorAction SilentlyContinue | Where-Object { $_.Name -notmatch '\.Package\.' } | Select-Object -First 1
          if ($csproj) {
            Write-Host "Found project file: $($csproj.FullName)"
            Add-Content -Path $env:GITHUB_ENV -Value "Solution_Path=$($csproj.FullName)"
            echo "found_solution=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          } else {
            Write-Host "No .sln or .csproj found in repository."
            echo "found_solution=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }
        }
        $wapproj = Get-ChildItem -Path $repoRoot -Recurse -Filter *.wapproj -File -ErrorAction SilentlyContinue | Select-Object -First 1
        if ($wapproj) {
          Write-Host "Found WAP project: $($wapproj.FullName)"
          Add-Content -Path $env:GITHUB_ENV -Value "Wap_Project_Path=$($wapproj.FullName)"
          Add-Content -Path $env:GITHUB_ENV -Value "Wap_Project_Directory=$($wapproj.DirectoryName)"
          echo "found_wap=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        } else {
          Write-Host "No WAP project found. Packaging steps will be skipped."
          echo "found_wap=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Execute unit tests
      if: steps.discover.outputs.found_solution == 'true' || env.Solution_Path != ''
      run: dotnet test "${{ env.Solution_Path }}"

    - name: Restore the application
      if: steps.discover.outputs.found_solution == 'true' || env.Solution_Path != ''
      run: msbuild "${{ env.Solution_Path }}" /t:Restore /p:Configuration=${{ matrix.configuration }}
      env:
        Configuration: ${{ matrix.configuration }}

    - name: Decode the pfx
      if: ${{ env.Wap_Project_Path != '' }}
      shell: pwsh
      run: |
        if (-not ${{ secrets.Base64_Encoded_Pfx }}) {
          Write-Host "Secret Base64_Encoded_Pfx is not set. Skipping certificate decode.";
          exit 1
        }
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path "${{ env.Wap_Project_Directory }}" -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    - name: Create the app package
      if: ${{ env.Wap_Project_Path != '' }}
      run: msbuild "${{ env.Wap_Project_Path }}" /p:Configuration=${{ matrix.configuration }} /p:UapAppxPackageBuildMode=${{ env.Appx_Package_Build_Mode }} /p:AppxBundle=${{ env.Appx_Bundle }} /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    - name: Remove the pfx
      if: ${{ env.Wap_Project_Directory != '' }}
      shell: pwsh
      run: Remove-Item -Path "${{ env.Wap_Project_Directory }}\GitHubActionsWorkflow.pfx" -ErrorAction SilentlyContinue

    - name: Upload build artifacts
      if: ${{ env.Wap_Project_Directory != '' }}
      uses: actions/upload-artifact@v4
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
